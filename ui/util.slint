import { Theme, Icons } from "theme.slint";
import { ToastStatus, AppPosType, TreeEntry } from "./base/def.slint";

export global Util {
    callback hide-window();
    callback show-window();
    callback close-window();

    callback min-window(bool);
    callback get-is-min-window() -> bool;

    callback max-window(bool);
    callback get-is-max-window() -> bool;

    callback fullscreen(bool);
    callback get-is-fullscreen() -> bool;

    callback get-scale-factor() -> float;
    callback get-current-pos() -> AppPosType;
    callback set-current-pos(AppPosType);

    callback update-window-size();
    callback set-window-center();

    // (message, status)
    callback show-toast(string, ToastStatus);

    // (message-type, user-data)
    callback handle-confirm-dialog(string, string);

    pure callback string-fixed2(string) -> string;
    pure callback float-fixed2(float) -> string;

    // (browser, url) => void
    callback open-url(string, string);

    callback remove-str-items-after([string], int);

    callback append-str-to-items([string], string);

    pure callback find-tree-children-nodes([TreeEntry], string) -> [TreeEntry];
    find-tree-children-nodes(entries, target-node) => {
        return entries;
    }

    callback search-str-items-by([string], string) -> [string];
    search-str-items-by(items, text) => {
        return items;
    }

    pure callback text-len(string) -> int;

    // (low-bound, up-bound) => void
    pure callback rand-int(int, int) -> int;

    pure callback qr-code(string) -> image;
    qr-code => {
        return Icons.no-data;
    }

    pure callback local-now(string) -> string;
    local-now => {
        return "12:34:45";
    }

    pure callback format_number_with_commas(string) -> string;
    format_number-with-commas(number-str) => {
        return number-str;
    }

    pure callback split-and-join-string(string, int, string) -> string;
    split-and-join-string(input, length, sep) => {
        return input;
    }

    public pure function text-color(status: ToastStatus) -> color {
        if (status == ToastStatus.Success) {
            return Theme.success-color;
        } else if (status == ToastStatus.Warning) {
            return Theme.warning-color.darker(10%);
        } else if (status == ToastStatus.Danger) {
            return Theme.danger-color;
        }
        return Theme.info-color;
    }

    public pure function icon-source(status: ToastStatus) -> image {
        if (status == ToastStatus.Success) {
            return @image-url("./images/success.svg");
        } else if (status == ToastStatus.Warning) {
            return @image-url("./images/warning.svg");
        } else if (status == ToastStatus.Danger) {
            return @image-url("./images/danger.svg");
        }
        return @image-url("./images/info.svg");
    }

    pure public function bound(low: int, value: int, height: int) -> int {
        return Math.max(low, Math.min(value, height));
    }

    pure public function get-token-icon(symbol: string, mint-address: string, icon-extension: string) -> image {
        return Icons.token;
    }

    pure public function lenght2float(len: length) -> float {
        return len / 1px;
    }

    pure public function progress-value(interval: duration) -> float {
        return Math.mod(animation-tick(), interval) / interval;
    }

    pure public function progress-value-int(max-int: int, interval: duration) -> int {
        return Math.floor(progress-value(interval) * max-int);
    }

    pure public function progress-angle(total-angle: angle, interval: duration) -> angle {
        return progress-value(interval) * total-angle;
    }

    pure public function progress-sin(angle: angle, interval: duration) -> float {
        return progress-value(interval) * Math.sin(angle);
    }

    pure public function rand-animation-tick(min-v: int, max-v: int) -> int {
        return Math.mod(animation-tick() / 1ms, max-v - min-v + 1) + min-v;
    }
}
