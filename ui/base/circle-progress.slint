import { Theme } from "../theme.slint";
import { Util } from "../util.slint";
import { Logic } from "../logic.slint";
import { Label } from "label.slint";

export component CircleProgress inherits Rectangle {
    pure function calc-percent(ring-angle: angle) -> int {
        return Util.bound(0, ring-angle * 100 / 360deg, 100);
    }

    in-out property <float> progress;
    in-out property <length> radius: 80px;
    in-out property <length> ring-width: 16px;

    in-out property <color> finished-progress-color: Theme.third-brand-color;
    in-out property <color> unfinished-progress-color: Theme.secondary-background;

    in-out property <color> finished-text-background: Theme.success-color;
    in-out property <color> unfinished-text-background: Theme.base-background;

    in-out property <string> finished-text: Logic.tr("Finished");
    in-out property <string> unfinished-text: root.calc-percent(root.ring-angle) + "%";
    in-out property <color> finished-text-color: Colors.white;
    in-out property <color> unfinished-text-color: Theme.regular-text-color;
    in-out property font-size <=> txt.font-size;

    private property <angle> ring-angle: 360deg * progress;

    width: radius * 2;
    height: self.width;

    Rectangle {
        Path {
            viewbox-x: 0;
            viewbox-y: 0;
            viewbox-width: root.radius / 1px * 2;
            viewbox-height: self.viewbox-width;

            stroke: Colors.transparent;
            stroke-width: 0;
            fill: root.ring-angle >= 360deg ? root.finished-progress-color : root.unfinished-progress-color;

            MoveTo {
                x: 0;
                y: root.radius / 1px;
            }

            ArcTo {
                radius-x: Util.lenght2float(root.radius);
                radius-y: Util.lenght2float(root.radius);
                sweep: true;
                x: root.radius * 2 / 1px;
                y: root.radius / 1px;
            }

            ArcTo {
                radius-x: Util.lenght2float(root.radius);
                radius-y: Util.lenght2float(root.radius);
                sweep: true;
                x: 0;
                y: root.radius / 1px;
            }

            Close { }
        }

        if ring-angle > 0deg && ring-angle < 360deg: Path {
            private property <angle> inner-ring-angle: Util.bound(1, root.ring-angle / 1deg, 365) * 1deg;
            private property <float> outline-end-x: Util.lenght2float(root.radius) * (1 - Math.cos(inner-ring-angle));
            private property <float> outline-end-y:  Util.lenght2float(root.radius) * (1 - Math.sin(inner-ring-angle));

            private property <float> innerline-end-x: Util.lenght2float(root.radius - root.ring-width) * (1 - Math.cos(inner-ring-angle)) + root.ring-width / 1px;
            private property <float> innerline-end-y: Util.lenght2float(root.radius - root.ring-width) * (1 - Math.sin(inner-ring-angle)) + root.ring-width / 1px;

            viewbox-x: 0;
            viewbox-y: 0;
            viewbox-width: root.radius / 1px * 2;
            viewbox-height: self.viewbox-width;

            stroke: Colors.transparent;
            stroke-width: 0;
            fill: root.finished-progress-color;

            MoveTo {
                x: 0;
                y: root.radius / 1px;
            }

            ArcTo {
                radius-x: Util.lenght2float(root.radius);
                radius-y: Util.lenght2float(root.radius);
                sweep: true;
                large-arc: root.ring-angle > 180deg;
                x: outline-end-x;
                y: outline-end-y;
            }

            ArcTo {
                radius-x: Util.lenght2float(root.ring-width / 2);
                radius-y: Util.lenght2float(root.ring-width / 2);
                sweep: true;
                x: innerline-end-x;
                y: innerline-end-y;
            }

            ArcTo {
                radius-x: Util.lenght2float(root.radius - root.ring-width);
                radius-y: Util.lenght2float(root.radius - root.ring-width);
                sweep: true;
                large-arc: !(root.ring-angle > 180deg);
                x: root.ring-width / 1px;
                y: root.radius / 1px;
            }

            ArcTo {
                radius-x: Util.lenght2float(root.ring-width / 2);
                radius-y: Util.lenght2float(root.ring-width / 2);
                sweep: true;
                x: 0;
                y: root.radius / 1px;
            }

            Close { }
        }

        Path {
            viewbox-x: 0;
            viewbox-y: 0;
            viewbox-width: root.radius / 1px * 2;
            viewbox-height: self.viewbox-width;

            stroke: Colors.transparent;
            stroke-width: 0;
            fill: root.ring-angle >= 360deg ? root.finished-text-background : root.unfinished-text-background;

            MoveTo {
                x: root.ring-width / 1px - 1;
                y: root.radius / 1px;
            }

            ArcTo {
                radius-x: Util.lenght2float(root.radius - root.ring-width) + 1;
                radius-y: Util.lenght2float(root.radius - root.ring-width) + 1;
                sweep: true;
                x: (root.radius * 2 - root.ring-width) / 1px + 1;
                y: root.radius / 1px;
            }

            ArcTo {
                radius-x: Util.lenght2float(root.radius - root.ring-width) + 1;
                radius-y: Util.lenght2float(root.radius - root.ring-width) + 1;
                sweep: true;
                x: root.ring-width / 1px - 1;
                y: root.radius / 1px;
            }

            Close { }
        }
    }

    Rectangle {
        txt := Label {
            text: root.ring-angle >= 360deg ? root.finished-text : root.unfinished-text;
            color: root.ring-angle >= 360deg ? root.finished-text-color : root.unfinished-text-color;
        }
    }
}
