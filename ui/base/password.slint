import { Palette } from "std-widgets.slint";
import { Theme, Icons } from "../theme.slint";
import { Logic } from "../logic.slint";
import { Store } from "../store.slint";
import { IconBtn } from "./icon-btn.slint";
import { Label } from "./label.slint";
import { Head } from "./head.slint";
import { LineInput } from "./line-input.slint";
import { CancelBtn, ConfirmBtn } from "./btn.slint";
import { SettingDetailInner, SettingDetailInnerVbox, SettingDetailLabel } from "./setting-detail.slint";

export global PasswordSetting {
    in-out property <bool> show;
    out property <string> handle-type;
    out property <string> user-data;

    public function set(show: bool, handle-type: string, user-data: string) {
        self.show = show;
        self.handle-type = handle-type;
        self.user-data = user-data;
    }
}

export component Password inherits Rectangle {
    in property <bool> is-show-header: true;
    in property confirm-btn-text <=> confirm-btn.text;
    private property <string> error-message;

    callback back();
    callback canceled();

    // (handle-type, password, user-data) -> string
    callback confirmed(string, string, string) -> string;

    forward-focus: password-lineedit;
    background: Theme.base-background;

    public function reset() {
        error-message = "";
        password-lineedit.text = "";
    }

    vbox := VerticalLayout {
        if is-show-header: Head {
            title: Logic.tr("Back");
            hbox-alignment: LayoutAlignment.start;
            clicked => {
                root.back();
            }
        }

        SettingDetailInner {
            vbox-alignment: LayoutAlignment.center;

            SettingDetailInnerVbox {
                HorizontalLayout {
                    alignment: LayoutAlignment.center;
                    Label {
                        text: Logic.tr("Password");
                        font-size: Theme.title1-font-size;
                        font-weight: Theme.bold-font-weight;
                    }
                }
            }

            SettingDetailInnerVbox {
                private property <bool> is-show-password;

                password-txt := SettingDetailLabel {
                    text: Logic.tr("Please enter password");
                }

                password-lineedit := LineInput {
                    icon: parent.is-show-password ? Icons.eye : Icons.close-eye;
                    width: root.width - Theme.padding * 4;
                    placeholder-text: Logic.tr("At least 8 chars");
                    input-type: is-show-password ? InputType.text : InputType.password;
                    is-show-icon: true;

                    edited => {
                        root.error-message = "";
                    }

                    accepted => {
                        confirm-btn.clicked();
                    }

                    clicked => {
                        parent.is-show-password = !parent.is-show-password;
                    }
                }
            }

            if root.error-message != "": SettingDetailInnerVbox {
                SettingDetailLabel {
                    color: Theme.danger-color;
                    text: root.error-message;
                }
            }

            HorizontalLayout {
                padding-top: Theme.padding * 5;
                padding-bottom: Theme.padding * 5;
                spacing: Theme.spacing * 8;

                CancelBtn {
                    text: Logic.tr("Cancel");
                    clicked => {
                        root.reset();
                        root.canceled();
                    }
                }

                confirm-btn := ConfirmBtn {
                    text: Logic.tr("Confirm");

                    clicked => {
                        root.error-message = root.confirmed(PasswordSetting.handle-type, password-lineedit.text, PasswordSetting.user-data);
                    }
                }
            }
        }
    }
}
