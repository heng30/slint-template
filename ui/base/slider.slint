import { Theme } from "../theme.slint";
import { Logic } from "../logic.slint";
import { ProgressBar } from "progress-bar.slint";
import { Label } from "label.slint";

// Example:
// Slider {
//     value: 30;
//     minimum: 20;
//     maximum: 80;
//     changed(value) => {
//         debug(value);
//     }
//     released(value) => {
//         debug(value);
//     }
// }

export component Slider inherits Rectangle {
    in-out property <float> value: 0;
    in-out property <float> minimum: 0;
    in-out property <float> maximum: 100;
    in-out property <length> indicator-size: Theme.icon-size * 2;
    in-out property <Orientation> orientation: Orientation.horizontal;

    in-out property enabled <=> ta.enabled;
    out property has-focus <=> fs.has-focus;

    in-out property <color> finished-progress-color: Theme.third-brand-color;
    in-out property <color> unfinished-progress-color: Theme.secondary-background;

    private property <float> progress: (Math.clamp(value, minimum, maximum) - minimum) / (maximum - minimum);

    callback changed(float);
    callback released(float);

    width: orientation == Orientation.horizontal ? 400px : Theme.default-font-size;
    height: orientation == Orientation.horizontal ? Theme.default-font-size : 400px;
    border-radius: orientation == Orientation.horizontal ? self.height / 2 : self.width / 2;

    pb := ProgressBar {
        x: 0;
        y: 0;
        width: root.width;
        height: root.height;
        border-radius: root.border-radius;
        orientation: root.orientation;
        progress: root.progress;
        finished-text: "";
        unfinished-text: "";
        unfinished-progress-color: root.unfinished-progress-color;
        finished-progress-color: root.enabled ? root.finished-progress-color : (Theme.is-dark ? root.unfinished-progress-color.brighter(50%) : root.unfinished-progress-color.darker(20%));
        finished-text-background: self.finished-progress-color;
    }

    fs := FocusScope {
        enabled: root.enabled;
    }

    ta := TouchArea {
        clicked => {
            fs.focus();

            if indicator-size <= 0 {
                if (root.orientation == Orientation.horizontal) {
                    root.progress = self.pressed-x / root.width;
                    root.value = root.progress * (root.maximum - root.minimum) + root.minimum;
                } else {
                    root.progress = 1 - self.pressed-y / root.height;
                    root.value = root.progress * (root.maximum - root.minimum) + root.minimum;
                }

                root.changed(root.value);
                root.released(root.value);
            }
        }
    }

    if root.indicator-size > 0: Rectangle {
        width: root.indicator-size;
        height: self.width;
        border-radius: self.width / 2;
        border-width: indicator-ta.pressed ? 2px : 0;
        border-color: root.finished-progress-color;
        background: Colors.white;
        drop-shadow-blur: Theme.padding * 2;
        drop-shadow-color: indicator-ta.pressed ? self.border-color : Theme.secondary-background.darker(30%);

        init => {
            if (root.orientation == Orientation.horizontal) {
                self.x = root.width * root.progress - self.width / 2;
            } else {
                self.y = root.height - self.height / 2 - root.height * root.progress;
            }
        }

        indicator-ta := TouchArea {
            enabled: root.enabled;
            moved => {
                if (root.orientation == Orientation.horizontal) {
                    parent.x = Math.clamp(parent.x + self.mouse-x - self.pressed-x, -parent.width / 2, root.width - parent.width / 2);
                    root.progress = (parent.x + parent.width / 2) / root.width;
                    root.value = root.progress * (root.maximum - root.minimum) + root.minimum;
                } else {
                    parent.y = Math.clamp(parent.y + self.mouse-y - self.pressed-y, -parent.height / 2, root.height - parent.height / 2);
                    root.progress = 1 - (parent.y + parent.width / 2) / root.height;
                    root.value = root.progress * (root.maximum - root.minimum) + root.minimum;
                }

                root.changed(root.value);
            }

            pointer-event(event) => {
                if (event.kind == PointerEventKind.up && event.button == PointerEventButton.left) {
                    root.released(root.value);
                }
            }
        }
    }
}
