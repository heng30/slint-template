import { LineEdit } from "std-widgets.slint";
import { Theme, Icons } from "../theme.slint";
import { Logic } from "../logic.slint";
import { Util } from "../util.slint";
import { IconBtn } from "icon-btn.slint";
import { TextBtnWithoutIcon } from "btn.slint";
import { Label } from "label.slint";

export component Pagination inherits Rectangle {
    in-out property <int> total-pages: 10;
    in-out property <int> init-page: 0;
    in-out property <int> show-pages: 6;

    in-out property <length> font-size: Theme.title1-font-size;
    in-out property <color> text-color: Theme.regular-text-color;
    in-out property <length> icon-size: Theme.icon-size * 1.3;
    in-out property <bool> is-show-jump-input: true;

    private property <bool> is-show-more: true;
    private property <int> start-page: 0;
    private property <int> real-show-pages-half: Math.round(show-pages / 2);
    private property <int> real-show-pages: real-show-pages-half * 2;
    private property <int> real-current-page: Math.clamp(init-page, 0, total-pages - 1);

    callback jump(int);

    public function set-current-page(page: int) {
        root.real-current-page = Math.clamp(page, 0, root.total-pages - 1);
        root.start-page = Math.clamp(root.real-current-page, 0, root.total-pages - root.real-show-pages);
        is-show-more = root.start-page < root.total-pages - root.real-show-pages;
    }

    if real-show-pages >= total-pages: HorizontalLayout {
        init => {
            root.preferred-width = self.preferred-width;
            root.preferred-height = self.preferred-height;
        }

        spacing: Theme.spacing;

        IconBtn {
            icon: Icons.arrow-left-round;
            use-auto-size: true;
            icon-size: root.icon-size;
            enabled-toucharea: root.real-current-page > 0;
            colorize: root.text-color;

            clicked => {
                root.real-current-page = Math.max(0, root.real-current-page - 1);
                jump(root.real-current-page);
            }
        }

        HorizontalLayout {
            spacing: Theme.spacing * 4;
            for index in total-pages: TextBtnWithoutIcon {
                is-circle: true;
                background: root.real-current-page == index ? Theme.thirdly-brand-color : Colors.transparent;

                text: start-page + index + 1;
                font-size: root.font-size;
                text-color: root.real-current-page == index ? Theme.light-text-color : root.text-color;

                clicked => {
                    root.real-current-page = index;
                    jump(root.real-current-page);
                }
            }
        }

        IconBtn {
            is-ltr: false;
            icon: Icons.arrow-right-round;
            use-auto-size: true;
            icon-size: root.icon-size;
            enabled-toucharea: root.real-current-page < root.total-pages - 1;
            colorize: root.text-color;

            clicked => {
                root.real-current-page = Math.min(root.total-pages - 1, root.real-current-page + 1);
                jump(root.real-current-page);
            }
        }
    }

    if real-show-pages < total-pages: HorizontalLayout {
        init => {
            root.preferred-width = self.preferred-width;
            root.preferred-height = self.preferred-height;
        }

        spacing: Theme.spacing;

        IconBtn {
            enabled-toucharea: root.real-current-page > 0;
            icon: Icons.arrow-left-round;
            use-auto-size: true;
            icon-size: root.icon-size;
            colorize: root.text-color;

            clicked => {
                root.real-current-page = Math.max(0, root.real-current-page - 1);

                if (!is-show-more) {
                    is-show-more = root.real-current-page < root.total-pages - root.real-show-pages;
                }
                if (root.real-current-page < root.start-page) {
                    root.start-page = Math.max(0, root.real-current-page - root.real-show-pages-half + 1);
                }
                jump(root.real-current-page);
            }
        }

        VerticalLayout {
            alignment: LayoutAlignment.center;
            HorizontalLayout {
                spacing: Theme.spacing * 4;
                for index in real-show-pages-half: TextBtnWithoutIcon {
                    is-circle: true;
                    background: root.real-current-page == start-page + index ? Theme.thirdly-brand-color : Colors.transparent;

                    text: start-page + index + 1;
                    font-size: root.font-size;
                    text-color: root.real-current-page == start-page + index ? Theme.light-text-color : root.text-color;

                    clicked => {
                        root.real-current-page = start-page + index;
                        jump(root.real-current-page);
                    }
                }

                if is-show-more: TextBtnWithoutIcon {
                    text: "...";
                    font-size: root.font-size;
                    text-color: root.text-color;

                    clicked => {
                        root.real-current-page = Math.min(root.start-page + root.real-show-pages-half, root.total-pages - root.real-show-pages);
                        root.start-page = root.real-current-page;
                        is-show-more = start-page + real-show-pages < total-pages;

                        debug("xxx", root.real-current-page, root.start-page);

                        jump(root.real-current-page);
                    }
                }

                HorizontalLayout {
                    spacing: Theme.spacing * 4;

                    for index in real-show-pages-half: TextBtnWithoutIcon {
                        private property <int> inner-real-current-page: total-pages - real-show-pages-half + index;

                        is-circle: true;
                        text: inner-real-current-page + 1;
                        font-size: root.font-size;
                        background: root.real-current-page == inner-real-current-page ? Theme.thirdly-brand-color : Colors.transparent; text-color: root.real-current-page == inner-real-current-page ? Theme.light-text-color : root.text-color;

                        clicked => {
                            root.real-current-page = inner-real-current-page;
                            jump(root.real-current-page);
                        }
                    }
                }
            }
        }

        IconBtn {
            is-ltr: false;
            icon: Icons.arrow-right-round;
            use-auto-size: true;
            icon-size: root.icon-size;
            enabled-toucharea: root.real-current-page < root.total-pages - 1;
            colorize: root.text-color;

            clicked => {
                root.real-current-page = Math.min(root.total-pages - 1, root.real-current-page + 1);
                jump(root.real-current-page);
            }
        }

        if root.is-show-jump-input: HorizontalLayout {
            private property <length> inner-font-size: root.font-size - 2px;
            spacing: Theme.spacing;

            Label {
                text: Logic.tr("Jump to");
                font-size: inner-font-size;
                color: root.text-color;
            }

            Rectangle {
                background: Theme.secondary-background;
                border-radius: Theme.border-radius;

                HorizontalLayout {
                    spacing: Theme.spacing * 2;
                    padding: Theme.padding;
                    padding-right: Theme.padding * 2;

                    Rectangle {
                        clip: true;
                        width: ltxt.preferred-width + Theme.padding;
                        height: ltxt.preferred-height;
                        border-radius: Theme.border-radius;
                        background: Theme.base-background;

                        TextInput {
                            width: 80%;
                            height: 80%;
                            input-type: number;
                            font-size: inner-font-size;
                            single-line: true;
                            vertical-alignment: TextVerticalAlignment.center;
                            text: root.real-current-page + 1;
                            color: root.text-color;

                            accepted => {
                                root.set-current-page(self.text.to-float() - 1);
                                self.text = root.real-current-page + 1;
                                self.clear-focus();
                                jump(root.real-current-page);
                            }
                        }
                    }

                    ltxt := Label {
                        font-size: inner-font-size;
                        text: "/ " + root.total-pages;
                        color: root.text-color;
                    }
                }
            }
        }
    }
}
