import { AppPosType } from "def.slint";
import { Theme, Icons } from "../theme.slint";
import { Util } from "../util.slint";
import { Label } from "label.slint";
import { IconBtn } from "icon-btn.slint";

export component StatusBar inherits Rectangle {
    in-out property <length> icon-size: Theme.default-font-size;

    in-out property <bool> is-show-icon;
    in-out property <image> icon;
    in-out property <string> title;

    private property <AppPosType> origin-pos;
    private property <physical-length> offset-x;
    private property <physical-length> offset-y;

    function reset() {
        offset-x = 0;
        offset-y = 0;
    }

    background: Theme.base-background;
    height: Theme.header-height;

    TouchArea {
        mouse-cursor: MouseCursor.grabbing;

        moved => {
            parent.offset-x = self.pressed-x - self.mouse-x;
            parent.offset-y = self.pressed-y - self.mouse-y;

            Util.set-current-pos( {
                x: origin-pos.x - parent.offset-x,
                y: origin-pos.y - parent.offset-y,
            });
        }

        pointer-event(event) => {
            if (event.button == PointerEventButton.left && event.kind == PointerEventKind.down) {
                parent.reset();
                parent.origin-pos = Util.get-current-pos();
            }
        }
    }

    HorizontalLayout {
        padding-left: Theme.padding * 2;
        padding-right: Theme.padding * 2;

        alignment: root.is-show-icon ? LayoutAlignment.space-between : LayoutAlignment.end;

        if root.is-show-icon: HorizontalLayout {
            spacing: Theme.spacing;
            Image {
                source: root.icon;
                width: root.icon-size;
            }

            Label {
                text: root.title;
                color: Theme.secondary-text-color;
                font-size: root.icon-size * 2 / 3;
            }
        }

        HorizontalLayout {
            spacing: Theme.spacing * 2;
            IconBtn {
                icon: Icons.status-bar-max;
                icon-size: root.icon-size;
                colorize: Colors.green;
                show-icon-hover-background: false;

                clicked => {
                    if (Util.get-is-max-window()) {
                        Util.max-window(false);
                        self.icon = Icons.status-bar-max;
                    } else {
                        Util.max-window(true);
                        self.icon = Icons.status-bar-normal;
                    }
                }
            }

            IconBtn {
                icon: Icons.status-bar-min;
                icon-size: root.icon-size;
                colorize: Colors.blue;
                show-icon-hover-background: false;

                clicked => {
                    Util.min-window(true);
                }
            }

            IconBtn {
                icon: Icons.status-bar-close;
                icon-size: root.icon-size;
                colorize: Colors.red;
                show-icon-hover-background: false;

                clicked => {
                    Util.close-window();
                }
            }
        }
    }
}
