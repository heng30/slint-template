import { Theme, Icons } from "../../theme.slint";
import { Util } from "../../util.slint";
import { Logic } from "../../logic.slint";
import { Store } from "../../store.slint";
import { SettingIconsBar }  from "../setting/desktop.slint";

import { ComponentEntry, ComponentIndex } from "../../store.slint";
import { SettingEntryV2, CenterLayout, IconsDialogSetting, Search } from "../../base/widgets.slint";
import { TreeExample } from "examples/tree.slint";
import { StepExample } from "examples/step.slint";
import { ProgressExample } from "examples/progress.slint";
import { SliderExample } from "examples/slider.slint";
import { ButtonExample } from "examples/button.slint";
import { ToastExample } from "examples/toast.slint";
import { RateExample } from "examples/rate.slint";
import { PaginationExample } from "examples/pagination.slint";
import { RecordIndicatorExample } from "examples/record-indicator.slint";
import { ToolTipExample } from "examples/tooltip.slint";
import { BreadCrumbExample } from "examples/bread-crumb.slint";
import { SkeletonExample } from "examples/skeleton.slint";
import { PinCodesExample } from "examples/pin-codes.slint";
import { SelectExample } from "examples/select.slint";
import { CollapseExample } from "examples/collapse.slint";
import { InputExample } from "examples/input.slint";
import { BadgeExample } from "examples/badge.slint";
import { LabelExample } from "examples/label.slint";
import { TagExample } from "examples/tag.slint";
import { LoadingExample } from "examples/loading.slint";
import { TabBtnExample } from "examples/tab-btn.slint";
import { PopupActionExample } from "examples/popup-action.slint";
import { BannerExample } from "examples/banner.slint";
import { DividerExample } from "examples/divider.slint";
import { LinkExample } from "examples/link.slint";
import { BlanketExample } from "examples/blanket.slint";
import { AvatarExample } from "examples/avatar.slint";
import { BrandExample }  from "examples/brand.slint";
import { EmptyExample }  from "examples/empty.slint";
import { LandingPageExample }  from "examples/landing-page.slint";
import { StatusBarExample }  from "examples/status-bar.slint";
import { DialogExample }  from "examples/dialog.slint";
import { CenterLayoutExample }  from "examples/center-layout.slint";
import { SlideCardExample }  from "examples/slide-card.slint";
import { ListTileExample }  from "examples/list-tile.slint";
import { DrawerExample }  from "examples/drawer.slint";
import { NewsExample }  from "examples/news.slint";
import { HeadExample }  from "examples/head.slint";
import { AboutExample }  from "examples/about.slint";
import { HelpExample }  from "examples/help.slint";
import { AddressBookExample }  from "examples/address-book.slint";
import { MnemonicExample }  from "examples/mnemonic.slint";
import { AccountBalanceExample }  from "examples/account-balance.slint";
import { SignInExample }  from "examples/sign-in.slint";
import { LogInExample }  from "examples/log-in.slint";
import { PasswordExample }  from "examples/password.slint";
import { ResetPasswordExample }  from "examples/reset-password.slint";
import { SettingExample }  from "examples/setting.slint";
import { TokenListExample }  from "examples/token-list.slint";
import { TokenSenderExample }  from "examples/token-sender.slint";
import { TokenRecipientExample }  from "examples/token-recipient.slint";
import { TransactionFeeExample }  from "examples/transaction-fee.slint";
import { WaitTransactionConfirmedExample }  from "examples/wait-transaction-confirmed.slint";
import { TransactionTileExample }  from "examples/transaction-tile.slint";

component LeftPanel inherits Rectangle {
    background: Theme.secondary-background;
    border-radius: Theme.border-radius * 2;
    clip: true;

    function update-index(index: ComponentIndex) {
        Store.current-component-index = index;
    }

    hbox := HorizontalLayout {
        x: 0;
        y: 0;
        z: 10;
        padding: Theme.padding;
        height: search.height;

        search := Search {
            private property <ComponentEntry> selected-component-entry;

            border-radius: Theme.border-radius * 2;
            enabled-popup: true;
            values: Logic.generate-search-values(Store.component-entries);

            search(value) => {
                self.selected-component-entry = Logic.get-component-index-from-search-values(Store.component-entries, value);

                if (self.selected-component-entry.component-index == ComponentIndex.None) {
                    return;
                }
                Store.current-component-index = self.selected-component-entry.component-index;
            }
        }
    }

    fl := Flickable {
        x: 0;
        y: hbox.height + Theme.padding * 2;
        width: root.width;
        height: root.height - hbox.height - btns-hbox.height;
        viewport-height: vbox.preferred-height;

        vbox := VerticalLayout {
            alignment: LayoutAlignment.start;
            private property <int> current-icon-index: 0;

            for entry[index] in Store.component-entries: SettingEntryV2 {
                text: entry.title;
                font-size: Theme.title3-font-size;
                background: Store.current-component-index == entry.component-index ? Theme.checked-background : self.has-hover ? Theme.hover-background : Colors.transparent;

                init => {
                    self.icon = IconsDialogSetting.icons[current-icon-index];
                    current-icon-index = Math.mod(current-icon-index + 1, IconsDialogSetting.icons.length);
                }

                clicked => {
                    update-index(entry.component-index);
                }
            }
        }
    }

    btns-hbox := HorizontalLayout {
        x: 0;
        y: fl.y + fl.height;
        alignment: LayoutAlignment.center;
        padding: Theme.padding * 4;
        height: sb.height + self.padding * 2;

        sb := SettingIconsBar {
            icon-size: Theme.icon-size * 1.33;
            h-padding: Theme.spacing * 2;
            h-spacing: Theme.padding * 8;
        }
    }
}

component RightPanel inherits Rectangle {
    if Store.current-component-index == ComponentIndex.Tree: TreeExample { }
    if Store.current-component-index == ComponentIndex.Step: StepExample { }
    if Store.current-component-index == ComponentIndex.Progress: ProgressExample { }
    if Store.current-component-index == ComponentIndex.Slider: SliderExample { }
    if Store.current-component-index == ComponentIndex.Button: ButtonExample { }
    if Store.current-component-index == ComponentIndex.Toast: ToastExample { }
    if Store.current-component-index == ComponentIndex.Rate: RateExample { }
    if Store.current-component-index == ComponentIndex.Pagination: PaginationExample { }
    if Store.current-component-index == ComponentIndex.RecordIndicator: RecordIndicatorExample { }
    if Store.current-component-index == ComponentIndex.ToolTip: ToolTipExample { }
    if Store.current-component-index == ComponentIndex.BreadCrumb: BreadCrumbExample { }
    if Store.current-component-index == ComponentIndex.Skeleton: SkeletonExample { }
    if Store.current-component-index == ComponentIndex.PinCodes: PinCodesExample { }
    if Store.current-component-index == ComponentIndex.Select: SelectExample { }
    if Store.current-component-index == ComponentIndex.Collapse: CollapseExample { }
    if Store.current-component-index == ComponentIndex.Input: InputExample { }
    if Store.current-component-index == ComponentIndex.Badge: BadgeExample { }
    if Store.current-component-index == ComponentIndex.Label: LabelExample { }
    if Store.current-component-index == ComponentIndex.Tag: TagExample { }
    if Store.current-component-index == ComponentIndex.Loading: LoadingExample { }
    if Store.current-component-index == ComponentIndex.TabBtn: TabBtnExample { }
    if Store.current-component-index == ComponentIndex.PopupAction: PopupActionExample { }
    if Store.current-component-index == ComponentIndex.Banner: BannerExample { }
    if Store.current-component-index == ComponentIndex.Divider: DividerExample { }
    if Store.current-component-index == ComponentIndex.Link: LinkExample { }
    if Store.current-component-index == ComponentIndex.Blanket: BlanketExample { }
    if Store.current-component-index == ComponentIndex.Avatar: AvatarExample { }
    if Store.current-component-index == ComponentIndex.Brand: BrandExample { }
    if Store.current-component-index == ComponentIndex.Empty: EmptyExample { }
    if Store.current-component-index == ComponentIndex.LandingPage: LandingPageExample { }
    if Store.current-component-index == ComponentIndex.StatusBar: StatusBarExample { }
    if Store.current-component-index == ComponentIndex.Dialog: DialogExample { }
    if Store.current-component-index == ComponentIndex.CenterLayout: CenterLayoutExample { }
    if Store.current-component-index == ComponentIndex.SlideCard: SlideCardExample { }
    if Store.current-component-index == ComponentIndex.ListTile: ListTileExample { }
    if Store.current-component-index == ComponentIndex.Drawer: DrawerExample { }
    if Store.current-component-index == ComponentIndex.News: NewsExample { }
    if Store.current-component-index == ComponentIndex.Head: HeadExample { }
    if Store.current-component-index == ComponentIndex.About: AboutExample { }
    if Store.current-component-index == ComponentIndex.Help: HelpExample { }
    if Store.current-component-index == ComponentIndex.AddressBook: AddressBookExample { }
    if Store.current-component-index == ComponentIndex.Mnemonic: MnemonicExample { }
    if Store.current-component-index == ComponentIndex.AccountBalance: AccountBalanceExample { }
    if Store.current-component-index == ComponentIndex.SignIn: SignInExample { }
    if Store.current-component-index == ComponentIndex.LogIn: LogInExample { }
    if Store.current-component-index == ComponentIndex.Password: PasswordExample { }
    if Store.current-component-index == ComponentIndex.ResetPassword: ResetPasswordExample { }
    if Store.current-component-index == ComponentIndex.Setting: SettingExample { }
    if Store.current-component-index == ComponentIndex.TokenList: TokenListExample { }
    if Store.current-component-index == ComponentIndex.TokenSender: TokenSenderExample { }
    if Store.current-component-index == ComponentIndex.TokenRecipient: TokenRecipientExample { }
    if Store.current-component-index == ComponentIndex.TransactionFee: TransactionFeeExample { }
    if Store.current-component-index == ComponentIndex.WaitTransactionConfirmed: WaitTransactionConfirmedExample { }
    if Store.current-component-index == ComponentIndex.TransactionTile: TransactionTileExample { }
}

export component Home inherits VerticalLayout {
    padding: Theme.padding;

    Rectangle {
        lp := LeftPanel {
            x: 0;
            width: Math.max(root.width * 0.2, 500px);
        }

        mp := Rectangle {
            x: lp.width;
            width: Theme.padding;

            TouchArea {
                mouse-cursor: MouseCursor.col-resize;
                moved => {
                    lp.width = Math.min(Math.max(0px, lp.width - (self.pressed-x - self.mouse-x)), root.width - self.width)
                }
            }
        }

        RightPanel {

            x: mp.x + mp.width;
            width: root.width - self.x;
        }
    }
}
