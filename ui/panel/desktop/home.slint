import { Theme, Icons } from "../../theme.slint";
import { Util } from "../../util.slint";
import { Logic } from "../../logic.slint";
import { Store, ComponentIndex } from "../../store.slint";
import { SettingIconsBar }  from "../setting/desktop.slint";

import { SettingEntryV2, CenterLayout, IconsDialogSetting } from "../../base/widgets.slint";
import { TreeExample } from "examples/tree.slint";
import { StepExample } from "examples/step.slint";


component LeftPanel inherits Rectangle {
    background: Theme.secondary-background;
    border-radius: Theme.border-radius * 2;
    clip: true;

    function update-index(index: ComponentIndex) {
        Store.current-component-index = index;
    }

    VerticalLayout {
        alignment: LayoutAlignment.space-between;
        Flickable {
            width: root.width;
            viewport-height: vbox.preferred-height;

            vbox := VerticalLayout {
                alignment: LayoutAlignment.start;
                private property <int> current-icon-index: 0;

                SettingEntryV2 {
                    text: Logic.tr("Tree");
                    background: Store.current-component-index == ComponentIndex.Tree ? Theme.checked-background : root.background;
                    font-size: Theme.title3-font-size;

                    init => {
                        self.icon = IconsDialogSetting.icons[current-icon-index];
                        current-icon-index = Math.mod(current-icon-index + 1, IconsDialogSetting.icons.length);
                    }

                    clicked => {
                        update-index(ComponentIndex.Tree);
                    }
                }

                SettingEntryV2 {
                    text: Logic.tr("Step");
                    background: Store.current-component-index == ComponentIndex.Step ? Theme.checked-background : root.background;
                    font-size: Theme.title3-font-size;

                    init => {
                        self.icon = IconsDialogSetting.icons[current-icon-index];
                        current-icon-index = Math.mod(current-icon-index + 1, IconsDialogSetting.icons.length);
                    }

                    clicked => {
                        update-index(ComponentIndex.Step);
                    }
                }
            }
        }

        HorizontalLayout {
            alignment: LayoutAlignment.center;
            padding: Theme.padding * 4;

            SettingIconsBar {
                icon-size: Theme.icon-size * 1.6;
                h-padding: Theme.spacing * 2;
                h-spacing: Theme.padding * 5;
            }
        }
    }
}

component RightPanel inherits Rectangle {
    CenterLayout {
        alignment: LayoutAlignment.center;

        if Store.current-component-index == ComponentIndex.Tree: TreeExample { }
        if Store.current-component-index == ComponentIndex.Step: StepExample { }
    }
}

export component Home inherits VerticalLayout {
    padding: Theme.padding;

    Rectangle {
        lp := LeftPanel {
            x: 0;
            width: Math.max(root.width * 0.2, 500px);
        }

        mp := Rectangle {
            x: lp.width;
            width: Theme.padding;

            TouchArea {
                mouse-cursor: MouseCursor.col-resize;
                moved => {
                    lp.width = Math.min(Math.max(0px, lp.width - (self.pressed-x - self.mouse-x)), root.width - self.width)
                }
            }
        }

        RightPanel {

            x: mp.x + mp.width;
            width: root.width - self.x;
        }
    }
}
