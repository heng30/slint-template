import { Logic, Theme, Store, Util, Icons, SettingPreference, SettingProxy, SettingDetailIndex, DeviceType } from "../def.slint";
import { IconBtn, SettingEntryV2, Head, SettingDetail, ToastStatus, About, Help, Dialog, ComponentPosition } from "../../base/widgets.slint";
import { Preference } from "components/preference.slint";
import { Donate } from "components/donate.slint";
import { Proxy } from "components/proxy.slint";

component LeftPanel inherits Rectangle {
    background: Theme.secondary-background;

    // (previous-index, current-index) -> void
    callback switch(SettingDetailIndex, SettingDetailIndex) -> bool;

    function update-index(index: SettingDetailIndex) {
        if (root.switch(Store.previous-setting-detail-index, index)) {
            Store.previous-setting-detail-index = index;
        }
    }

    Flickable {
        width: root.width;
        viewport-height: vbox.preferred-height;

        vbox := VerticalLayout {
            alignment: LayoutAlignment.start;

            SettingEntryV2 {
                text: Logic.tr("Preference");
                icon: Icons.ui;
                background: Store.current-setting-detail-index == SettingDetailIndex.Preference ? Theme.checked-background: root.background;

                clicked => {
                    update-index(SettingDetailIndex.Preference);
                }
            }

            SettingEntryV2 {
                text: Logic.tr("Proxy");
                icon: Icons.proxy-light;
                background: Store.current-setting-detail-index == SettingDetailIndex.Proxy ? Theme.checked-background: root.background;

                clicked => {
                    update-index(SettingDetailIndex.Proxy);
                }
            }

            SettingEntryV2 {
                text: Logic.tr("Help");
                icon: Icons.help-light;
                background: Store.current-setting-detail-index == SettingDetailIndex.Help ? Theme.checked-background : root.background;

                clicked => {
                    update-index(SettingDetailIndex.Help);
                }
            }

            SettingEntryV2 {
                text: Logic.tr("Donate");
                icon: Icons.donate;
                background: Store.current-setting-detail-index == SettingDetailIndex.Donate ? Theme.checked-background : root.background;

                clicked => {
                    update-index(SettingDetailIndex.Donate);
                }
            }
        }
    }
}

component RightPanel inherits Rectangle {
    background: Theme.base-background;

    public function preference-get() -> SettingPreference {
        return preference.get();
    }

    public function proxy-get() -> SettingProxy {
        return proxy.get();
    }

    preference := Preference {
        visible: Store.current-setting-detail-index == SettingDetailIndex.Preference;
        is-show-header: false;
    }

    proxy := Proxy {
        visible: Store.current-setting-detail-index == SettingDetailIndex.Proxy;
        is-show-header: false;
    }

    if Store.current-setting-detail-index == SettingDetailIndex.Help: Help {
        is-show-header: false;
        entries: Store.helps;
    }

    if Store.current-setting-detail-index == SettingDetailIndex.Donate: Donate {
        is-show-header: false;
    }
}

component Setting inherits Rectangle {
    public function save(index: SettingDetailIndex) -> bool {
        if (index == SettingDetailIndex.Preference) {
            if (rp.preference-get().font-size == "" || rp.preference-get().win-width == "" || rp.preference-get().win-height == "") {
                Util.show-toast(Logic.tr("Input can not be empty"), ToastStatus.Warning);
                return false;
            }

            if (Store.device-type == DeviceType.Desktop) {
                Store.setting-preference.win-width = rp.preference-get().win-width;
                Store.setting-preference.win-height = rp.preference-get().win-height;
            }

            Store.setting-preference.font-size = rp.preference-get().font-size;
            Store.setting-preference.font-family = rp.preference-get().font-family;

            Logic.set-setting-preference(rp.preference-get());
        } else if (index == SettingDetailIndex.Proxy) {
            Logic.set-setting-proxy(rp.proxy-get());
        }
        return true;
    }

    lp := LeftPanel {
        x: 0;
        width: Math.max(root.width * 0.3, 160px);
        switch(previous-index, current-index) => {
            if (!root.save(previous-index)) {
                return false;
            }
            Logic.switch-setting-detail(current-index);
            return true;
        }
    }

    mp := Rectangle {
        x: lp.width;
        width: Theme.padding;

        TouchArea {
            mouse-cursor: MouseCursor.col-resize;
            moved => {
                lp.width = Math.min(Math.max(0px, lp.width - (self.pressed-x - self.mouse-x)), root.width - self.width)
            }
        }
    }

    rp := RightPanel {
        x: mp.x + mp.width;
        width: root.width - self.x;
    }
}

export component SettingDialog inherits Dialog {
    title: Logic.tr("Setting");
    is-hide-btns: true;
    is-prevent-event-forward: true;

    in-out property <length> inner-height: 650px;

    setting := Setting {
        height: root.inner-height;
    }

    cancel-clicked => {
        setting.save(Store.current-setting-detail-index);
        Logic.switch-setting-detail(SettingDetailIndex.None);
    }
}

export component AboutDialog inherits Dialog {
    title: Logic.tr("About");
    is-hide-btns: true;
    is-prevent-event-forward: true;

    in-out property <length> inner-height: 650px;

    About {
        height: root.inner-height;
        is-show-header: false;
    }

    cancel-clicked => {
        Logic.switch-setting-detail(SettingDetailIndex.None);
    }
}

export component SettingIconsBar inherits Rectangle {
    width: hbox.preferred-width;
    height: hbox.preferred-height;
    border-radius: Theme.border-radius;

    in-out property <bool> show-icon-hover-background: false;
    in-out property <length> icon-size: Theme.icon-size;
    in-out property <bool> is-show-tip: false;
    in-out property <ComponentPosition> tip-position;
    in-out property h-padding <=> hbox.padding;
    in-out property h-spacing <=> hbox.spacing;

    hbox := HorizontalLayout {
        padding: Theme.padding * 2;
        spacing: Theme.spacing * 4;

        IconBtn {
            icon: Icons.setting-fill;
            icon-size: root.icon-size;
            show-icon-hover-background: root.show-icon-hover-background;
            is-show-tip: root.is-show-tip;
            tip-position: root.tip-position;
            tip: Logic.tr("setting");

            clicked => {
                Logic.switch-setting-detail(SettingDetailIndex.Preference);
            }
        }

        IconBtn {
            icon: Icons.about-fill;
            icon-size: root.icon-size;
            show-icon-hover-background: root.show-icon-hover-background;
            is-show-tip: root.is-show-tip;
            tip-position: root.tip-position;
            tip: Logic.tr("about");

            clicked => {
                Logic.switch-setting-detail(SettingDetailIndex.About);
            }
        }

        IconBtn {
            icon: Icons.github;
            icon-size: root.icon-size;
            show-icon-hover-background: root.show-icon-hover-background;
            is-show-tip: root.is-show-tip;
            tip-position: root.tip-position;
            tip: Logic.tr("github");

            clicked => {
                Util.open-url("Default","https://github.com/Heng30/slint-template");
            }
        }
    }
}
