import { LineEdit, CheckBox, ComboBox } from "std-widgets.slint";
import { Theme, Icons } from "../../theme.slint";
import { Logic } from "../../logic.slint";
import { Util } from "../../util.slint";
import { Store,  SettingUI, SettingDetailIndex } from "../../store.slint";
import { LineInput, CenterLayout, ConfirmDialogSetting, Divider, Link, Brand, IconBtn, Label, Head, SettingEntry, SettingDetail, SettingDetailInner, TabBtn, SettingDetailInnerVbox, SettingDetailLabel, TxtEdit, CancelBtn, ConfirmBtn, NoDataImg, Tag, RadioBtn, TokenRecipient, SlideCard, ListTile, IconsDialogSetting, ElevatedBtn, Help, SettingDetailSwitch, About, ToastStatus } from "../../base/widgets.slint";

component UI inherits SettingDetail {
    title: Logic.tr("Preference");

    public function get() -> SettingUI {
        font-size-lineedit.clear-focus();

        return {
            font-size: font-size-lineedit.text,
            font-family: fonts-combox.current-value,
            language: Store.setting-ui.language,
            is-dark: Store.setting-ui.is-dark,
        };
    }

    init => {
        font-size-lineedit.text = Store.setting-ui.font-size;
        fonts-combox.current-value = Store.setting-ui.font-family;
    }

    SettingDetailInner {
        SettingDetailInnerVbox {
            font-size-txt := SettingDetailLabel {
                text: Logic.tr("Font size");
            }

            font-size-lineedit := LineEdit {
                input-type: number;
                height: font-size-txt.preferred-height * 1.6;
                placeholder-text: Logic.tr("10 ~ 50");
                text: Store.setting-ui.font-size;
            }
        }

        SettingDetailInnerVbox {
            fonts-label := SettingDetailLabel {
                text: Logic.tr("Font family");
            }

            fonts-combox := ComboBox {
                height: fonts-label.preferred-height * 1.6;
                model: ["Default", "Source Han Serif CN", "Source Han Sans CN"];
                current-value: Store.setting-ui.font-family;
            }
        }

        SettingDetailInnerVbox {
            SettingDetailLabel {
                text: Logic.tr("Choose language");
            }

            HorizontalLayout {
                HorizontalLayout {
                    width: 50%;
                    cn-radio := RadioBtn {
                        text: "中文";
                        checked: Store.setting-ui.language == "cn";
                        check => {
                            Store.setting-ui.language = "cn";
                        }
                    }
                }

                en-radio := RadioBtn {
                    text: "English";
                    checked: Store.setting-ui.language == "en";
                    check => {
                        Store.setting-ui.language = "en";
                    }
                }
            }
        }

        SettingDetailInnerVbox {
            SettingDetailLabel {
                text: Logic.tr("Choose Theme");
            }

            HorizontalLayout {
                HorizontalLayout {
                    width: 50%;
                    RadioBtn {
                        text: Logic.tr("Light");
                        checked: !Theme.is-dark;
                        check => {
                            Theme.toggle();
                        }
                    }
                }

                RadioBtn {
                    text: Logic.tr("Dark");
                    checked: Theme.is-dark;
                    check => {
                        Theme.toggle();
                    }
                }
            }
        }
    }
}

component Donate inherits SettingDetail {
    title: Logic.tr("Donate");

    private property <bool> is-wechat: true;

    SettingDetailInner {
        vbox-alignment: LayoutAlignment.stretch;

        HorizontalLayout {
            TabBtn {
                width: 50%;
                height: Theme.footer-height;
                icon: Icons.wechat-light;
                text: Logic.tr("Wechat pay");
                checked: root.is-wechat;
                clicked => {
                    root.is-wechat = true;
                }
            }

            TabBtn {
                height: Theme.footer-height;
                icon: Icons.metamask-light;
                text: Logic.tr("MetaMask crypto pay");
                checked: !root.is-wechat;
                clicked => {
                    root.is-wechat = false;
                }
            }
        }

        Rectangle {
            if root.is-wechat: Image {
                source: Icons.wechat-pay;
                width: Math.min(root.width * 0.8, root.height * 0.8);
                height: self.width;
            }

            if !root.is-wechat: Image {
                source: Icons.metamask-pay;
                width: Math.min(root.width * 0.6, root.height * 0.6);
                height: self.width;
            }
        }
    }
}

component Body inherits VerticalLayout {
    alignment: start;
    spacing: Theme.spacing;

    in-out property current-setting-detail-index <=> Store.current-setting-detail-index;

    callback switch(SettingDetailIndex);

    head := Head {
        hbox-alignment: LayoutAlignment.start;
        icon: Icons.setting-fill;
        title: Logic.tr("Setting");
    }

    Flickable {
        viewport-height: vbox.preferred-height;

        vbox := VerticalLayout {
            spacing: Theme.spacing * 2;

            SettingEntry {
                text: Logic.tr("Preference");
                icon: Icons.ui;

                clicked => {
                    root.current-setting-detail-index = SettingDetailIndex.UI;
                }
            }

            SettingEntry {
                text: Logic.tr("About");
                icon: Icons.about-light;
                clicked => {
                    root.current-setting-detail-index = SettingDetailIndex.About;
                }
            }

            SettingEntry {
                text: Logic.tr("Help");
                icon: Icons.help-light;
                clicked => {
                    root.current-setting-detail-index = SettingDetailIndex.Help;
                }
            }

            SettingEntry {
                text: Logic.tr("Donate");
                icon: Icons.donate;
                clicked => {
                    root.current-setting-detail-index = SettingDetailIndex.Donate;
                }
            }

            SettingEntry {
                text: Logic.tr("Github");
                icon: Icons.github;
                clicked => {
                    Util.open-url("Default","https://github.com/Heng30/slint-template");
                }
            }
        }
    }
}

export component Setting inherits Rectangle {
    private property <int> selected-account-index;

    if Store.current-setting-detail-index == SettingDetailIndex.Home: Body { }

    if Store.current-setting-detail-index != SettingDetailIndex.Home: Rectangle {
        if Store.current-setting-detail-index == SettingDetailIndex.UI: UI {
            back => {
                if (self.get().font-size == "") {
                    Util.show-toast(Logic.tr("Input cann't be empty"), ToastStatus.Warning);
                    return;
                }
                Store.current-setting-detail-index = SettingDetailIndex.Home;
                Logic.set-setting-ui(self.get());
            }
        }

        if Store.current-setting-detail-index == SettingDetailIndex.About: About {
            back => {
                Store.current-setting-detail-index = SettingDetailIndex.Home;
            }
        }

        if Store.current-setting-detail-index == SettingDetailIndex.Help: Help {
            entries: Store.helps;
            back => {
                Store.current-setting-detail-index = SettingDetailIndex.Home;
            }
        }

        if Store.current-setting-detail-index == SettingDetailIndex.Donate: Donate {
            back => {
                Store.current-setting-detail-index = SettingDetailIndex.Home;
            }
        }
    }
}
